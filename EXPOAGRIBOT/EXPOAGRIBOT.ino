/*
Agung Dwi Prasetyo
Computer Science IPB
*/

#define BA {B01110000,B10001000,B10001000,B11111000,B10001000,B10001000}
#define BB {B11110000,B10001000,B10001000,B11110000,B10001000,B11111000}
#define BC {B11111000,B10000000,B10000000,B10000000,B10000000,B11111000}
#define BD {B11110000,B10001000,B10001000,B10001000,B10001000,B11110000}
#define BE {B11111000,B10000000,B10000000,B11110000,B10000000,B11111000}
#define BF {B11111000,B10000000,B10000000,B11110000,B10000000,B10000000}
#define BG {B01110000,B10001000,B10000000,B10011000,B10001000,B01110000}
#define BH {B10001000,B10001000,B11111000,B10001000,B10001000,B10001000}
#define BI {B01110000,B00100000,B00100000,B00100000,B00100000,B01110000}
#define BJ {B00111000,B00010000,B00010000,B00010000,B10010000,B01100000}
#define BM {B10001000,B11011000,B10101000,B10101000,B10001000,B10001000}
#define BN {B10001000,B11001000,B10101000,B10101000,B10011000,B10001000}
#define BL {B10000000,B10000000,B10000000,B10000000,B10000000,B11111000}
#define BO {B01110000,B10001000,B10001000,B10001000,B10001000,B01110000}
#define BP {B11110000,B10001000,B10001000,B11110000,B10000000,B10000000}
#define BQ {B01110000,B10001000,B10101000,B10011000,B01111000,B00001000}
#define BR {B11110000,B10001000,B10001000,B11110000,B10001000,B10001000}
#define BS {B01110000,B10001000,B01100000,B00010000,B10001000,B01110000}
#define BK {B10001000,B10010000,B11100000,B11100000,B10010000,B10001000}
#define BT {B11111000,B00100000,B00100000,B00100000,B00100000,B00100000}
#define BU {B10001000,B10001000,B10001000,B10001000,B10001000,B01110000}
#define BV {B10001000,B10001000,B10001000,B10001000,B01010000,B00100000}
#define BW {B10001000,B10001000,B10101000,B10101000,B10101000,B01010000}
#define BX {B10001000,B01010000,B00100000,B00100000,B01010000,B10001000}
#define BY {B10001000,B01010000,B00100000,B00100000,B00100000,B00100000}
#define BZ {B11111000,B00001000,B00110000,B01100000,B10000000,B11111000}
#define LA {B00000000,B01110000,B00001000,B01111000,B10001000,B01111000}
#define LB {B10000000,B10000000,B10110000,B11001000,B10001000,B11110000}
#define LC {B00000000,B01110000,B10000000,B10000000,B10001000,B01110000}
#define LD {B00001000,B00001000,B01111000,B10001000,B10001000,B01111000}
#define LE {B00000000,B01110000,B10001000,B11111000,B10000000,B01110000}
#define LF {B00110000,B01001000,B01000000,B11100000,B01000000,B01000000}
#define LG {B00000000,B01111000,B10001000,B01111000,B00001000,B01110000}
#define LH {B10000000,B10000000,B10110000,B11001000,B10001000,B10001000}
#define LI {B00100000,B00000000,B01100000,B00100000,B00100000,B01111000}
#define LJ {B00010000,B00000000,B00111000,B00010000,B10010000,B01100000}
#define LK {B10000000,B10010000,B10100000,B11000000,B10100000,B10010000}
#define LL {B01100000,B00100000,B00100000,B00100000,B00100000,B01111000}
#define LM {B00000000,B00000000,B11010000,B10101000,B10101000,B10001000}
#define LN {B00000000,B00000000,B10110000,B11001000,B10001000,B10001000}
#define LO {B00000000,B01110000,B10001000,B10001000,B10001000,B01110000}
#define LP {B00000000,B11110000,B10001000,B11110000,B10000000,B10000000}
#define LQ {B00000000,B01101000,B10011000,B01111000,B00001000,B00001000}
#define LR {B00000000,B00000000,B10110000,B11001000,B10000000,B10000000}
#define LS {B00000000,B01110000,B10000000,B01110000,B00001000,B11110000}
#define LT {B01000000,B01000000,B11100000,B01000000,B01001000,B00110000}
#define LU {B00000000,B00000000,B10001000,B10001000,B10011000,B01101000}
#define LV {B00000000,B00000000,B10001000,B10001000,B01010000,B00100000}
#define LW {B00000000,B00000000,B10001000,B10101000,B10101000,B01010000}
#define LX {B00000000,B10001000,B01010000,B00100000,B01010000,B10001000}
#define LY {B00000000,B10001000,B10001000,B01111000,B00001000,B01110000}
#define LZ {B00000000,B11111000,B00010000,B00100000,B01000000,B11111000}
#define SPACE {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000}
#define NUM0 {B01110000,B10011000,B10101000,B10101000,B11001000,B01110000}
#define NUM1 {B00100000,B01100000,B10100000,B00100000,B00100000,B01110000}
#define NUM2 {B01110000,B10001000,B00001000,B01110000,B10000000,B11111000}
#define NUM3 {B11110000,B00001000,B00001000,B01111000,B00001000,B11110000}
#define NUM4 {B10001000,B10001000,B10001000,B11111000,B00001000,B00001000}
#define NUM5 {B11111000,B10000000,B11110000,B00001000,B10001000,B01110000}
#define NUM6 {B11111000,B10000000,B11111000,B10001000,B10001000,B11111000}
#define NUM7 {B11111000,B00001000,B00001000,B01111000,B00001000,B00001000}
#define NUM8 {B11111000,B10001000,B11111000,B10001000,B10001000,B11111000}
#define NUM9 {B11111000,B10001000,B11111000,B00001000,B00001000,B11111000}
#define DEVIDE {B00001000,B00010000,B00100000,B00100000,B01000000,B10000000}
#define TWODOTS {B01100000,B01100000,B00000000,B00000000,B01100000,B01100000}
#define DOT {B00000000,B00000000,B00000000,B00000000,B01100000,B01100000}
#define COMA {B00000000,B00000000,B00000000,B00110000,B00110000,B01100000}
#define LINE {B00000000,B00000000,B11111000,B11111000,B00000000,B00000000}
#define QUASTION {B01110000,B10001000,B00010000,B00100000,B00000000,B00100000}
#define MARK {B00100000,B01110000,B01110000,B00100000,B00000000,B00100000}
#define SMILE {B00000000,B01010000,B01010000,B00000000,B10001000,B01110000}
#define KRGTP {B01000000,B00100000,B00100000,B00100000,B00100000,B01000000}
#define KRGBK {B00100000,B01000000,B01000000,B01000000,B01000000,B00100000}
#define LOVE {B00000000,B00101000,B01111100,B01111100,B00111000,B00010000}
#define PESAWAT {B00000000,B00001000,B00010011,B11111110,B00010001,B00001000}
#define blok {B11111111,B11111111,B11111111,B11111111,B11111111,B11111111}

#define panjang 4
#define kecepatan 20

int latchPin = 10;
int clockPin = 13;
int dataPin = 11;
int clock = 9;
int Reset = 8;
int latchPinPORTB = latchPin - 8;
int clockPinPORTB = clockPin - 8;
int dataPinPORTB = dataPin - 8;
int i = 0;
long outputKata[6];
int array_turn = 0;

byte inputan_text[panjang][6]={BR,BY,BA,BN}; // masukin teksnya disini

void setup(){
  Serial.begin(9600);
  pinMode(dataPin,OUTPUT);
  pinMode(clockPin,OUTPUT);
  pinMode(latchPin,OUTPUT);
  pinMode(clock,OUTPUT);
  pinMode(Reset,OUTPUT);
  digitalWrite(Reset,HIGH);
  digitalWrite(Reset,LOW);
  setupSPI();
}

void display_word(int loops,byte word_print[][6],int panjangKata,int kecepatan){
  i = 0; // ngereset IC 4017
  for(int g=0;g<6;g++)
    outputKata[g] = 0;
  for(int x=0;x<panjangKata;x++){
   for(int r=0;r<6;r++)
      outputKata[r] |= word_print[x][r]; 
    for (int z=0;z<6;z++){
        for(int p=0;p<6;p++)
          outputKata[p] = outputKata[p] << 1;
      for(int t=0;t<kecepatan;t++){
        for(int y=0;y<6;y++){
          if(i == 6){
            digitalWrite(Reset,HIGH);
            digitalWrite(Reset,LOW);
            i = 0;
          }
          latchOff();
          spi_transfer(make_word(0x01000000,y)); // ngirim data ke ic 4017 (decade counter)
          spi_transfer(make_word(0x00010000,y));
          spi_transfer(make_word(0x00000100,y));
          latchOn();
          delayMicroseconds(800);
          latchOff();
          spi_transfer(0);
          spi_transfer(0);
          spi_transfer(0);
          latchOn();
          digitalWrite(clock,HIGH);
          digitalWrite(clock,LOW);
          i++;
        }
      }
    }
  }
  finish_scroll(kecepatan);
}

void finish_scroll(int delay_scroll){
  for (int n=0;n<24;n++){
        for(int h=0;h<6;h++)
          outputKata[h] = outputKata[h] << 1;
      for(int w=0;w<delay_scroll;w++){
        for(int k=0;k<6;k++){
          if(i == 6){
            digitalWrite(Reset,HIGH);
            digitalWrite(Reset,LOW);
            i = 0;
          }
          latchOff();
          spi_transfer(make_word(0x01000000,k));
          spi_transfer(make_word(0x00010000,k));
          spi_transfer(make_word(0x00000100,k));
          latchOn();
          delayMicroseconds(800);
          latchOff();
          spi_transfer(0);
          spi_transfer(0);
          spi_transfer(0);
          latchOn();
          digitalWrite(clock,HIGH);
          digitalWrite(clock,LOW);
          i++;
        }
      }
    }
}

byte make_word (long posisi,byte turn){
  byte dumKata = 0;
  for(int i=0;i<8;i++){
    if(outputKata[turn] & (posisi<<i))
      dumKata |= 0x01<<i;
  }
  return dumKata;
}   

// FUNGSI UTAMA
void loop() {
	display_word(1,inputan_text,panjang,kecepatan);
}
  
void latchOn(){
  bitSet(PORTB,latchPinPORTB);
}

void latchOff(){
  bitClear(PORTB,latchPinPORTB);
}

void setupSPI(){
  byte clr;
  SPCR |= ( (1<<SPE) | (1<<MSTR) );

  //SPCR |= ( (1<<SPR1) | (1<<SPR0) );

  SPCR &= ~( (1<<SPR1) | (1<<SPR0) );
  clr=SPSR; // clear SPI status reg
  clr=SPDR; // clear SPI data reg
  SPSR |= (1<<SPI2X); // set prescaler bits

  //SPSR &= ~(1<<SPI2X); // clear prescaler bits

  delay(10);
}

byte spi_transfer(byte data){
  SPDR = data;			  // memulai transmisi
  while (!(SPSR & (1<<SPIF)))     // menunggu sampai transmisi selanjutnya
  return SPDR;			  // mengembalikan byte data
}

